plugins {
    id 'c'
    id 'groovy'
    id 'application'
    id 'io.github.krakowski.jextract' version '0.5.0'
}

group = 'org.taack'
version = '1.0-SNAPSHOT'

String nativeLibPath = file("${project.parent.projectDir}/cad-dsl/build/libs/nativeLib/shared").absolutePath
String nativeLibPath2 = file("${project.parent.projectDir}/cad-dsl-native/build/lib/main/release").absolutePath

model {
    components {
        nativeLib(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir 'src/main/c' // Path to your C source files
                    }
                }
            }
        }
    }
    binaries {
        all {

            // Define a preprocessor macro for every binary
            cppCompiler.define "NDEBUG"

            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                println "Linking with Gcc"
                cppCompiler.args "-O2", "-fno-access-control"
                linker.args "-Xlinker", "-S", "-L", nativeLibPath2, "-l", "cad-dsl-native", "-B", "direct"
            }
            if (toolChain in VisualCpp) {
                cppCompiler.args "/Zi"
                linker.args "/DEBUG"
            }
        }
    }
}

// Tells gradle to wait for our native library to compile before we can run our java application
run.dependsOn 'nativeLibSharedLibrary'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

application {
    mainClass = 'org.taack.Main'
    applicationDefaultJvmArgs = ["-Djava.library.path=" + nativeLibPath + ":" + nativeLibPath2, "--enable-preview", "--enable-native-access=ALL-UNNAMED"]
}

jextract {
    // The header file from which we want to generate the bindings
    header("${project.projectDir}/src/main/c/native.h") {
        // The library name (don't worry about this for now)
        libraries = ['nativeLib']
        // The package under which all source files will be generated
        targetPackage = 'org.nativelib'
        // The generated class name
        className = 'NativeLib'
    }
}

run  {
    println "Setting LD_LIBRARY_PATH=$nativeLibPath:$nativeLibPath2"
    environment('LD_LIBRARY_PATH', "$nativeLibPath:$nativeLibPath2")
}

dependencies {
    implementation 'org.apache.groovy:groovy:5.0.0-alpha-9'
}
