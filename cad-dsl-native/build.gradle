plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

group = 'org.taack'
version = '1.0-SNAPSHOT'

def libs77 = "TKBO TKBRep TKBin TKBinL TKBinTObj TKBinXCAF TKBool TKCAF TKCDF TKDCAF\
 TKDraw TKExpress TKFeat TKFillet TKG2d TKG3d TKGeomAlgo TKGeomBase TKHLR\
 TKIGES TKIVtk TKIVtkDraw TKLCAF TKMath TKMesh TKMeshVS TKOffset TKOpenGl\
 TKOpenGlTest TKPrim TKQADraw TKRWMesh TKSTEP TKSTEP209 TKSTEPAttr TKSTEPBase\
 TKSTL TKService TKShHealing TKStd TKStdL TKTObj TKTObjDRAW TKTopAlgo\
 TKTopTest TKV3d TKVCAF TKVRML TKViewerTest TKXCAF TKXDE TKXDECascade\
 TKXDEDRAW TKXDEIGES TKXDESTEP TKXMesh TKXSBase TKXSDRAW TKXml\
 TKXmlL TKXmlTObj TKXmlXCAF TKernel"

def libs78 = "TKBinL TKBin TKBinTObj TKBinXCAF TKBool TKBO TKBRep TKCAF TKCDF TKDCAF TKDECascade\
 TKDEGLTF TKDEIGES TKDEOBJ TKDEPLY TKDE TKDESTEP TKDESTL TKDEVRML TKDraw TKernel TKExpress TKFeat\
 TKFillet TKG2d TKG3d TKGeomAlgo TKGeomBase TKHLR TKLCAF TKMath TKMesh TKMeshVS TKOffset TKOpenGl\
 TKOpenGlTest TKPrim TKQADraw TKRWMesh TKService TKShHealing TKStdL TKStd TKTObjDRAW TKTObj TKTopAlgo\
 TKTopTest TKV3d TKVCAF TKViewerTest TKXCAF TKXDEDRAW TKXMesh TKXmlL TKXml TKXmlTObj TKXmlXCAF TKXSBase\
 TKXSDRAWDE TKXSDRAWGLTF TKXSDRAWIGES TKXSDRAWOBJ TKXSDRAWPLY TKXSDRAW TKXSDRAWSTEP TKXSDRAWSTL TKXSDRAWVRML"

def otherLibs = " GL GLU GLX GLEW X11 xcb Xau Xdmcp"

def linkerLibs = []

def libs = libs77 + otherLibs
libs.split(' ').each {
    linkerLibs << "-l$it"
}

library {
    linkage = [Linkage.SHARED]
    targetMachines = [
            machines.linux.x86_64,
    ]
}

tasks.withType(CppCompile).configureEach {
    optimized = false
    includes.from new File("/usr/include/opencascade/").path
}

tasks.withType(LinkSharedLibrary).configureEach {
    // Define toolchain-specific compiler and linker options
    linkerArgs = ["-Xlinker", "-S", "-Bdirect", "-L/usr/local/lib/"] + linkerLibs
}

tasks.withType(LinkExecutable).configureEach {
    // Define toolchain-specific compiler and linker options
    linkerArgs = ["-Xlinker", "-S", "-Bdirect", "-L/usr/local/lib/"] + linkerLibs
}

task('listSymsPerLib') {
    doLast {
        println "AUO ++++++++++++++++++++++++++ $libs"
        libs.split(' ').each { libName ->
            "nm -gDC /lib/lib${libName}.so".execute().text.eachLine { symbole ->
                println "$libName: $symbole"
            }
        }
        println "AUO --------------------------"
    }
}